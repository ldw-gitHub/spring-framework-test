package org.ldw.design.factory;

/**
 * @description
 * @author: liudawei
 * @date: 2020/5/26 15:51
 */
public class BeanFactory {

	/**
	 * UML 类图
	 *
	 * 简单工厂模式
	 * 创建多态类型的类
	 *
	 * 设计原则：
	 * 		单一原则：就一个类而言，应该仅有一个引起它变化的原因
	 * 		开放-封闭原则：软件实体（类、模块、函数等等）应该可以扩展，但是不可修改
	 * 		依赖倒转原则：高层模块不应该依赖底层模块，两个都应该依赖抽象；抽象不应该依赖细节，细节应该依赖抽象
	 * 		里氏代换原则：子类型必须能够替换掉它们的父类型
	 *
	 *
	 *
	 *
	 * 	软件设计：发现职责，并把那些职责相互分离，如果你能够想到多于一个动机去改变一个类，那么这个类就具有多余一个的职责
	 *
	 */
}
